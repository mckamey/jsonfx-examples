<%@ Control Name="Calendar.YearGrid" Language="JavaScript" %>

<script type="text/javascript">
	var today = Date.today();

	this.buildMonth = function(/*Date*/ date, /*Events[]*/ events) {
		if (!(date instanceof Date)) {
			date = new Date();
		}

		var	ordinal = date.getMonth(),
			current = date.clone().moveToFirstDayOfMonth().clearTime(),
			last = date.clone().moveToLastDayOfMonth().moveToDayOfWeek(0).clearTime(),
			month = [],
			week;

		if (current.getDay()) {
			current.moveToDayOfWeek(0, -1);
		}

		month.Month = date.clone();

		for (; current.isBefore(last); current.addDays(1)) {
			if (!current.getDay()) {
				// Each sunday start a new week
				week = {
					days: []
				};
				month.push(week);
			}

			var day = {
				Date: current.clone(),
				Count: events[current.toString("yyyy-MM-dd")],
				IsPrev: current.getMonth() < ordinal,
				IsNext: current.getMonth() > ordinal,
				IsSelected : Calendar.YearGrid.data.SelectedDate.equals(current)
			};
			week.days.push(day);
		}

		return month;
	};

	this.buildYear = function(/*Date*/ date, /*Dictioniary<string,int>*/ events) {
		if (!(date instanceof Date)) {
			date = new Date();
		}

		var	year = [];

		date = date.clone().moveToFirstDayOfMonth().clearTime();
		for (var i=0; i<12; i++) {
			date.setMonth(i);
			year.push(this.buildMonth(date, events));
		}

		return year;
	};

	this.gotoDayClosure = function(/*object*/ data) {
		return function() {
			window.location.href = data.Date.toString("/yyyy/M#d");
			return false;
		};
	};

	this.getCss = function(/*Day*/ data, /*int*/ dayOfWeek) {
		date = data.Date.clone().clearTime();
		var css = "day-of-week-"+String(dayOfWeek);

		if (data.Count > 0) {
			css += " has-events";
		}

		if (today.equals(date)) {
			css += " today";
		}

		if (data.IsPrev) {
			css += " prev-month";
		} else if (data.IsNext) {
			css += " next-month";
		}

		return css;
	};

	// private fields
	var registered;

	this.init = function() {

		if (!registered) {
			$().keyup(function(/*Event*/ evt) {
				evt = evt || window.event;

				switch(evt.keyCode) {
					case 0x25: //left arrow
						window.location.href = $("a.prev-year").attr("href");
						break;
					case 0x27: //right arrow
						window.location.href = $("a.next-year").attr("href");
						break;
				}
			});

			registered = true;
		}
	};

</script>

<div class="year-view" jbst:oninit="<%= this.init %>">

<h1>
<a class="button prev-year" href="<%= this.data.SelectedDate.clone().add({years:-1}).toString("/yyyy") %>">&laquo;</a>
<a class="button" href="/"><%= this.data.SelectedDate.toString("yyyy") %></a>
<a class="button next-year" href="<%= this.data.SelectedDate.clone().add({years:1}).toString("/yyyy") %>">&raquo;</a>
</h1>

<jbst:control data="<%= this.buildYear(this.data.SelectedDate, this.data.Items) %>">
<div class="month">

<h2><a class="button" href="<%= this.data.Month.toString("/yyyy/M") %>"><%= this.data.Month.toString("MMMM") %></a></h2>
<table id="<%= this.data.Month.getDate().toString() %>">
	<tr>
		<th>Su</th>
		<th>Mo</th>
		<th>Tu</th>
		<th>We</th>
		<th>Th</th>
		<th>Fr</th>
		<th>Sa</th>
	</tr>

<jbst:control data="<%= this.data %>">
	<tr>

		<jbst:control data="<%= this.data.days %>">

			<td id="<%= this.data.IsPrev||this.data.IsNext ? null : this.data.Date.toString("M/d") %>"
				class="<%= Calendar.YearGrid.getCss(this.data, this.index) %>"
				onclick="<%= Calendar.YearGrid.gotoDayClosure(this.data) %>">
				<h3><%= this.data.Date.getDate().toString() %></h3>
			</td>

		</jbst:control>

	</tr>
</jbst:control>

</table>

</div>
</jbst:control>

</div>
