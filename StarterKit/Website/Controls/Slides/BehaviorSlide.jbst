<%@ Control Name="Example.behaviorSlide" Language="JavaScript" %>

<jbst:Control jbst:Name="Example.jsonfxInfo" />

<jbst:Control jbst:Name="Example.slideFrame">

	<h2>Binding JavaScript behaviors to DOM elements</h2>

	<p>As web applications become more and more dynamic, a common issue is when and how to bind dynamic behaviors (e.g. JavaScript events) to DOM elements.  A common need is for each dynamic control to run an initialization method on page load (or when inserted into the page).</p>
	<p>A different but related issue is the need to properly unbind or dispose these dynamic behaviors on unload.  Older browsers (particularly Internet Explorer) experience DOM memory leaks when references to DOM objects are not properly disposed.  This causes memory to slowly and steadily creap higher until the browser is ultimately closed.</p>
	<p>JsonFx approaches this problem by allowing the developer to register bind/unbind methods to categories of DOM objects.</p>
	<code class="Syntax Example">
		<div class="Comment">// method for registering bind/unbind methods</div>
		<div><span class="Comment">/*void*/</span> JsonFx.Bindings.register(
		<div class="Indent">
			<span class="Comment">/*string*/</span> tagName,<br />
			<span class="Comment">/*string*/</span> className,<br />
			<span class="Comment">/*function*/</span> bind,<br />
			<span class="Comment">/*function*/</span> unbind
		</div>);</div>
	</code>

	<p>The JsonFx.Bindings.register method takes arguments for specifying a tagName / className combination and the corresponding bind and unbind functions. For a basic example, say you wanted to specify that every link with a certain class name should open in a new window.</p>
	<code class="Syntax Example">
		<div class="Comment">&lt;!-- notice the class being applied --&gt;</div>
		<div>
			<span class="Op">&lt;</span><span class="Key">a</span>
			<span class="Key">href</span><span class="Op">=</span><span class="Lit">"http://jsonfx.net"</span>
			<span class="Key">class</span><span class="Op">=</span><span class="Lit">"js-ExtLink"</span><span class="Op">&gt;</span>
				this link should open in a new window
			<span class="Op">&lt;/</span><span class="Key">a</span><span class="Op">&gt;</span>
		</div>
	</code>
	<p><em>NOTE: the <code>"js-"</code> prefix is a suggested naming convention which helps to distinguish classes used for behavior from classes used for styling.  Following a separation of concerns based approach helps to keep your code more modular for the future.</em></p>

	<p>Then you would attach a binding for all <code>&lt;a/&gt;</code> tags containing a className of <code>"js-ExtLink"</code>:</p>
	<code class="Syntax Example">
		<div class="Comment">/* the bind method attaches an onclick event handler and the unbind method clears the handler */</div>
		<div>JsonFx.Bindings.register(
		<div class="Indent">
			<span class="Lit">"a"</span>,<br />
			<span class="Lit">"js-ExtLink"</span>,<br />
			<span class="Key">function</span>(<span class="Comment">/*DOM*/</span> elem) {
			<div class="Indent">
				elem.onclick = function(<span class="Comment">/*Event*/</span> evt) {
				<div class="Indent">
					window.open(<span class="Key">this</span>.href);<br />
					<span class="Key">return</span> <span class="Key">false</span>;<br />
				</div>
				};<br />
			</div>},<br />
			<span class="Key">function</span>(<span>/*DOM*/</span> elem) {
			<div class="Indent">
				elem.onclick = <span class="Key">null</span>;
			</div>});
		</div></div>
	</code>

	<h2>Composing dynamic behaviors</h2>

	<p>One benefit of these binding mechanisms is to be able to compose multiple behaviors independently.  For instance, if there was another behavior which showed a custom tooltip on hover, it could be applied to the same element which launches a new window:</p>
	<code class="Syntax Example">
		<div class="Comment">&lt;!-- notice the multiple classes being applied --&gt;</div>
		<div>
			<span class="Op">&lt;</span><span class="Key">a</span>
			<span class="Key">href</span><span class="Op">=</span><span class="Lit">"http://jsonfx.net"</span>
			<span class="Key">class</span><span class="Op">=</span><span class="Lit">"js-ExtLink js-Tooltip"</span><span class="Op">&gt;</span>
				this link should open in a new window, and show a custom tooltip on hover
			<span class="Op">&lt;/</span><span class="Key">a</span><span class="Op">&gt;</span>
		</div>
	</code>
	
	<p>A second binding registration applies only the tooltip behaviors:</p>
	<code class="Syntax Example">
		<div class="Comment">/* the bind method attaches onmouseover/onmouseout event handlers and the unbind method clears the handlers */</div>
		<div>JsonFx.Bindings.register(
		<div class="Indent">
			<span class="Lit">"a"</span>,<br />
			<span class="Lit">"js-Toolip"</span>,<br />
			<span class="Key">function</span>(<span class="Comment">/*DOM*/</span> elem) {
			<div class="Indent">
				elem.onmouseover = showCustomTooltip;<br />
				elem.onmouseout = hideCustomTooltip;<br />
			</div>},<br />
			<span class="Key">function</span>(<span>/*DOM*/</span> elem) {
			<div class="Indent">
				elem.onmouseover = <span class="Key">null</span>;<br />
				elem.onmouseout = <span class="Key">null</span>;
			</div>});
		</div></div>
	</code>

	<h2>Unbinding, etc.</h2>

	<p>Implicit unbinding of these behaviors happens on page unload so that browser memory leaks are avoided.</p>
	<p>Other JsonFx features have been designed to be used in conjunction with behavior binding.  For instance: the <code>JsonFx.UI.clear(&hellip;)</code> method performs the appropriate unbinding before removing all children.  Also, after data-binding JBST templates you can rehydrate the resulting JsonML passing in the binding filter:</p>
	<code class="Syntax Example">
		<div class="Comment">/* databind JSON data to a JBST template, resulting in a JsonML representation */</div>
		<span class="Key">var</span> myResult = myTemplate.dataBind( myData );<br /><br />

		<div class="Comment">/* hydrate the resulting JsonML, binding any dynamic behaviors to elements */</div>
		myResult = JsonML.parse( myResult, JsonFx.Bindings.bindOne );<br /><br />

		<div class="Comment">/* clear the container contents, unbinding any applied dynamic behaviors */</div>
		JsonFx.UI.clear( myContainer );<br /><br />

		<div class="Comment">/* add the resulting DOM elements to the container */</div>
		myContainer.appendChild( myResult );
	</code>

	<p>The above pattern is so commonly used that JsonFx implements it as a single method call, with a boolean option to append rather than replace the contents:</p>
	<code class="Syntax Example">
		<div class="Comment">/* JBST + JSON => JsonML => DOM */</div>
		<span class="Comment">/*void*/</span> JsonFx.UI.bindJBST(<span class="Comment">/*DOM*/</span> myContainer, <span class="Comment">/*JBST*/</span> myTemplate, <span class="Comment">/*object*/</span> myData, <span class="Comment">/*boolean*/</span> false);
	</code>

	<p>Similarly, to hydrate simple JsonML with the appropriate binding filter:</p>
	<code class="Syntax Example">
		<span class="Comment">/*DOM*/</span> JsonFx.UI.bindJsonML(<span class="Comment">/*JsonML*/</span> myJsonML);
	</code>

</jbst:Control>