<%@ Control Name="Example.jbstSlide" Language="JavaScript" %>

<jbst:Control jbst:Name="Example.jsonfxInfo" />

<jbst:Control jbst:Name="Example.slideFrame">

	<h2>Client-Side templates for rich Ajax UI</h2>
	<p>Intuitive browser-side templating allows client-side databinding while leveraging familiar ASP/JSP syntax.</p>

	<h2>Build-time template compilation</h2>
	<p>At build-time controls are converted to <a href="http://jsonml.org/bst/">JsonML+Browser-Side Templates</a> (JBST).
		JBST is a JavaScript-based intermediate format which allows easy databinding with JSON data at runtime.</p>
	<p>Everything that you are reading has been auto-built and inserted into the page at runtime with JavaScript.</p>

	<h2>Similar to ASP.NET UserControls and JavaServer Pages</h2>
	<p>
		JBST controls are dynamic reusable units of UI.
		Creating a JBST control is as easy as creating an ASP.NET UserControl.
		The data binding syntax navitvely uses JavaScript as it's scripting language since the data binding is performed on the client.
		Notice how there are different types of code blocks in JBST templates.
	</p>

	<code class="Syntax Example">

		<span class="Serv">&lt;%</span><span class="Op">@</span> <span class="Key">Control</span> <span class="Key">Name</span><span class="Op">=</span><span class="Lit">"MyApp.MyJbstControl"</span> <span class="Key">Language</span><span class="Op">=</span><span class="Lit">"JavaScript"</span> <span class="Serv">%&gt;</span><br /><br />

		<span class="Serv">&lt;%</span><span class="Op">!</span>
		<div class="Indent">
			<div class="Comment">/* initialization code block, executed only once as control is loaded */</div>

			<span class="Key">this</span>.generateValue = <span class="Key">function</span>() {
			<div class="Indent">
				<span class="Key">return</span> <span class="Key">new</span> <span class="Type">Date</span>().toString();
			</div>
			};<br /><br />

			<span class="Key">this</span>.myInitTime = <span class="Key">this</span>.generateValue();
		</div>
		<span class="Serv">%&gt;</span><br /><br />

		<span class="Serv">&lt;%</span>
		<div class="Indent">
			<div class="Comment">/* data binding code block, executed each time as control is data bound */</div>

			<span class="Key">this</span>.myBindTime = <span class="Key">this</span>.generateValue();
		</div>
		<span class="Serv">%&gt;</span><br /><br />

		<div class="Comment"><span class="Serv">&lt;%</span>-- JBST Comment --<span class="Serv">%&gt;</span></div>
		<span class="Op">&lt;</span><span class="Key">span</span> <span class="Key">style</span><span class="Op">=</span><span class="Lit">"color:red"</span><span class="Op">&gt;</span><span class="Serv">&lt;%</span><span class="Op">=</span> <span class="Key">this</span>.myBindTime <span class="Comment">/* data binding expression */</span> <span class="Serv">%&gt;</span><span class="Op">&lt;/</span><span class="Key">span</span><span class="Op">&gt;</span><br />
		<span class="Op">&lt;</span><span class="Key">span</span> <span class="Key">style</span><span class="Op">=</span><span class="Lit">"color:green"</span><span class="Op">&gt;</span><span class="Serv">&lt;%</span><span class="Op">=</span> <span class="Key">this</span>.myInitTime <span class="Comment">/* data binding expression */</span> <span class="Serv">%&gt;</span><span class="Op">&lt;/</span><span class="Key">span</span><span class="Op">&gt;</span><br /><br />
		
		<div class="Comment">&lt;!-- HTML Comment --&gt;</div>
		<span class="Op">&lt;</span><span class="Key">span</span> <span class="Key">style</span><span class="Op">=</span><span class="Lit">"color:blue"</span><span class="Op">&gt;</span><span class="Serv">&lt;%</span><span class="Op">$</span> <span class="Key">Resources</span><span class="Op">:</span> <span class="Lit">localizationKey</span> <span class="Comment">/* JBST extension */</span> <span class="Serv">%&gt;</span><span class="Op">&lt;/</span><span class="Key">span</span><span class="Op">&gt;</span>

	</code>

	<p>Notice how the <code>this</code> keyword is used to gain access to the JBST control itself.</p>

	<h3>JBST Expressions</h3>
	<p>
		The JBST Expression <code class="Syntax"><span class="Serv">&lt;%</span><span class="Op">=</span> <span class="Serv">%&gt;</span></code> syntax is used to emit a value into the resulting markup.
		Its contents are evaluated and the result is treated as either a string literal or JsonML.
		By evaluating an expression that emits JsonML you can nest templates (more about this later).
		This is directly analagous to JSP Expressions.
	</p>
	<p>In the example above, the two spans at the bottom are populated by expressions with values stored on the template itself.</p>

	<h3>JBST Statement Block</h3>
	<p>
		The JBST Statement <code class="Syntax"><span class="Serv">&lt;%</span> <span class="Serv">%&gt;</span></code> syntax is used to perform arbitrary code execution each time the template is bound.
		If a value is returned then the value is effectively treated like an expression.
		If no value is performed then no output is generated.
		This form is useful for executing methods which calculate data-binding values for later use by JBST expressions.
		This is directly analagous to JSP Scriptlets.
	</p>

	<h3>JBST Declaration Block</h3>
	<p>
		The JBST Declaration <code class="Syntax"><span class="Serv">&lt;%</span><span class="Op">!</span> <span class="Serv">%&gt;</span></code> syntax is used to perform arbitrary code execution only when the template is initialized.
		No output is generated from declarations.
		This form is useful for defining variables or methods for later use during data-binding.
		This is directly analagous to JSP Declarations.
	</p>

	<h2>Can be nested like Server Controls</h2>
	<p>&hellip;</p>

</jbst:Control Name="Example.slideFrame">