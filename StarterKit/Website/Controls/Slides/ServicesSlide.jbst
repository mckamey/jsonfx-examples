<%@ Control Name="Example.servicesSlide" Language="JavaScript" %>

<jbst:Control jbst:Name="Example.jsonfxInfo" />

<jbst:Control jbst:Name="Example.slideFrame">

	<h2>JSON-RPC 2.0</h2>

	<p>
		JSON-RPC is an emerging standard which over the last few years has given SOAP-based web services real competition.
		These JSON-based services are lighter and far easier to integrate into the browser for true Ajax applications.
	</p>

	<p>JsonFx provides intuitive JSON-RPC 2.0 support, including auto-generated service proxy objects which make calling a service as easy as calling a method on a JavaScript object.</p>

	<h2>Ajax services, simplified.</h2>

	<p>The service end-point <code>*.jrpc</code> file determines where the browser's requests are sent.</p>

	<code class="Syntax Example" style="margin-right:180px;">
		<div><span class="Serv">&lt;%</span><span class="Op">@</span> <span class="Key">JsonService</span> <span class="Key">Class</span><span class="Op">=</span><span class="Lit">"MyApp.MyJsonService"</span> <span class="Key">Language</span><span class="Op">=</span><span class="Lit">"C#"</span> <span class="Serv">%&gt;</span></div>
		<br />
		<div class="Comment">/*
			<div class="Indent">
				This service end-point can simply reference a class which implements the actual service methods.<br />
				Implementing a JSON-RPC service is as easy as marking up a service class with custom attributes.<br />
				Very similar to ASP.NET SOAP Web Services.<br />
			</div>
		*/</div>
	</code>

	<p>
		The implementation for each JsonFx service is simply a class marked up with special attributes controlling how it is exposed to external requests.
		Only classes which have the <code>JsonServiceAttribute</code> are externally addressable, and only public methods which have the <code>JsonMethodAttribute</code> are externally callable.
	</p>

	<code class="Syntax Example">

		<span class="Key">using</span> JsonFx.JsonRpc;<br />
		<br />
		<span class="Key">namespace</span> MyApp<br />
		{
		<div class="Indent">
			[<span class="Type">JsonService</span>(Namespace=<span class="Lit">"Example"</span>, Name=<span class="Lit">"MyServiceProxy"</span>)]<br />
			<span class="Key">public</span> <span class="Key">class</span> <span class="Type">MyJsonService</span><br />
			{
			<div class="Indent">
				<div class="Comment">/* the proxy function will be Example.MyServiceProxy.getInfo(...) */</div>
				[<span class="Type">JsonMethod</span>(Name=<span class="Lit">"getInfo"</span>)]<br />
				<span class="Key">public</span> <span class="Type">MyServiceResult</span> GetInfo(<span class="Key">string</span> foo, <span class="Key">double</span> bar)<br />
				{
				<div class="Indent">
					<span class="Key">return</span> <span class="Key">new</span> <span class="Type">MyServiceResult</span>(foo, bar);
				</div>
				}
			</div>
			}
		</div>
		}
		
	</code>

	<p>And adding a new service method is as simple as adding .NET attributes to the method which is to be exposed.  It is then automatically available to the client.</p>

	<h2>Auto-generated JavaScript service proxies</h2>

	<p>
		Calling Ajax services in JavaScript is as simple as calling a method on a JavaScript object.
		All of the argument marshalling, serialization and Ajax callback is handled automatically by JsonFx.
	</p>

	<code class="Syntax Example">

		<div class="Comment">// an options object controls the service proxy callback</div>
		<span class="Key">var</span> options = {
		<div class="Indent">
			onSuccess: Example.successCallback, <span class="Comment">// called for success</span><br />
			onFailure: Example.errorCalback, <span class="Comment">// called for errors</span><br />
			onComplete: Example.completedCallback, <span class="Comment">// called at the end of all requests</span><br />
			context: { <span class="Lit">"elem"</span>: document.body, <span class="Lit">"etc"</span>: 42 } <span class="Comment">// any data needed by the callback</span>
		</div>
		};<br />
		<br />

		<div class="Comment">/* call the JSON-RPC service proxy object with the method args in order and add an options object at the end */</div>
		Example.MyServiceProxy.getInfo(<span class="Lit">"testing 1, 2, 3"</span>, 3.14159, options);<br />
		<br />

		<div class="Comment">/* when the request completes, the appropriate callback will get called with the return value and the context object */</div>

	</code>

	<h2>Merging service proxies at build time</h2>

	<p>Since the service proxies are generated as pure JavaScript, they can be compacted, compressed and merged in with the rest of the application's script.</p>

</jbst:Control>
