<%@ Control Name="UIT.TreeNode" Language="JavaScript" %>

<script type="text/javascript">

	// override/replace this method in the application as the
	// template knows nothing about the structure of the data
	/*function*/ this.getAction = function(/*object*/ data) {
		return UIT.TreeView.toggle;
	};

	// override/replace this method in the application as the
	// template knows nothing about the structure of the data
	/*string*/ this.getLabelCss = function(/*object*/ data) {
		return "";
	};

	/* private methods ----------------------------------------------*/

	/*DOM*/ function select(/*DOM*/ elem) {
		elem = JsonFx.UI.findChild(elem, "js-NodeLabel");
		if (elem && elem.focus) {
			elem.focus();
		}
		return elem;
	}

	/*DOM*/ function findParent(/*DOM*/ elem) {
		elem = JsonFx.UI.findParent(elem, "js-TreeNode");
		elem = JsonFx.UI.findParent(elem, "js-TreeNode", true);
		elem = select(elem);
		return elem;
	}

	/*DOM*/ function findChild(/*DOM*/ elem) {
		elem = JsonFx.UI.findParent(elem, "js-TreeNode");
		elem = JsonFx.UI.findChild(elem, "js-TreeNode", true);
		elem = select(elem);
		return elem;
	}
	
	/*DOM*/ function findPrev(/*DOM*/ elem) {
		elem = JsonFx.UI.findParent(elem, "js-TreeNode");
		elem = JsonFx.UI.findPrev(elem, "js-TreeNode", true);
		elem = select(elem);
		return elem;
	}

	/*DOM*/ function findNext(/*DOM*/ elem) {
		elem = JsonFx.UI.findParent(elem, "js-TreeNode");
		elem = JsonFx.UI.findNext(elem, "js-TreeNode", true);
		elem = select(elem);
		return elem;
	}

	/*void*/ function clearEvent(/*Event*/ evt) {
		evt = evt || window.event;
		if (evt) {
			if (evt.stopPropagation) {
				evt.stopPropagation();
				evt.preventDefault();
			} else {
				try {
					evt.cancelBubble = true;
					evt.returnValue = false;
				} catch (ex) {
					// IE6
				}
			}
		}
	}

	/*int*/ function getKeyCode(/*Event*/ evt) {
		evt = evt || window.event;
		if (!evt) {
			return -1;
		}
		return Number(evt.keyCode || evt.charCode || -1);
	}

	/* event handlers ----------------------------------------------*/

	/*void*/ this.ondblclick = function(/*Event*/ evt) {
		if (this.click) {
			return this.click(evt);
		}
		if (this.onclick) {
			return this.onclick(evt);
		}
	};

	/*void*/ this.onkeydown = function(/*Event*/ evt) {
		evt = evt || window.event;

		switch (getKeyCode(evt)) {
			case 0x0D: // enter
			case 0x20: // space
				if (this.click) {
					this.click();
				} else if (this.onclick) {
					this.onclick();
				}
				break;

			case 0x25: // left arrow
				if (!UIT.TreeView.isCollapsed(this)) {
					UIT.TreeView.collapse.call(this);
				} else {
					findParent(this);
				}
				break;

			case 0x28: // down arrow
				if (!UIT.TreeView.isCollapsed(this)) {
					findChild(this);
				} else {
					var elem = this;
					while (elem && !findNext(elem)) {
						elem = findParent(elem);
					}
				}
				break;

			case 0x26: // up arrow
				var prev = findPrev(this);
				if (!prev) {
					findParent(this);
				} else if (!UIT.TreeView.isCollapsed(prev)) {
					prev = findChild(prev);
					while (prev) {
						prev = findNext(prev);
					}
				}
				break;

			case 0x27: // right arrow
				if (UIT.TreeView.isCollapsed(this)) {
					if (this.click) {
						this.click();
					} else if (this.onclick) {
						this.onclick();
					}
				} else {
					findChild(this);
				}
				break;

			default:
//				alert(getKeyCode(evt));
				// allow everything else to propagate
				return;
		}

		clearEvent(evt);
		return false;
	}

</script>

<li class="tree-node tree-node-closed js-TreeNode">
	<a	href="<%= this.data.path %>"
		class="<%= "tree-node-label js-NodeLabel"+this.getLabelCss(this.data) %>"
		onclick="<%= this.getAction(this.data) %>"
		onkeydown="<%= this.onkeydown %>"
		ondblclick="<%= this.ondblclick %>"
		hidefocus="true"><span class="tree-node-icon"></span><%= this.data.name %></a>
</li>
