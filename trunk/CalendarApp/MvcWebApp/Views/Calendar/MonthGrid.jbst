<%@ Control Name="Calendar.MonthGrid" Language="JavaScript" %>

<script type="text/javascript">
	var today = Date.today();

	this.buildMonth = function(/*Date*/ date, /*Events[]*/ events) {
		if (!(date instanceof Date)) {
			date = new Date();
		}

		var	current = date.clone().moveToFirstDayOfMonth(),
			last = date.clone().moveToLastDayOfMonth().moveToDayOfWeek(0),
			month = [],
			week;

		if (current.getDay()) {
			current.moveToDayOfWeek(0, -1);
		}

		for (; current.isBefore(last); current.addDays(1)) {
			if (!current.getDay()) {
				// Each sunday start a new week
				week = {
					days: []
				};
				month.push(week);
			}

			var day = {
				Date: current.clone(),
				Events: Calendar.DateUtil.filterDay(events, current)
			};
			week.days.push(day);
		}

		return month;
	};

	this.changeDayClosure = function(/*Date*/ date) {
		// only allow clicking on current month days for now
		if (Calendar.MonthGrid.data.StartRange.isAfter(date) ||
			Calendar.MonthGrid.data.EndRange.isBefore(date)) {
			return function() {
				window.location.href = date.toString("/yyyy/M");
				return false;
			};
		}

		// this function will become the onclick event
		return function() {
			var oldGrid = $(".month-view");
			if (!oldGrid.length) {
				return;
			}

			Calendar.Model.SelectedDate = date;
			var newGrid = Calendar.MonthGrid.bind(Calendar.Model);
			oldGrid.replaceWith(newGrid);

			return false;
		};
	};

	this.getCss = function(/*Date*/ date, /*int*/ dayOfWeek) {
		date = date.clone().clearTime();
		var css = "day-of-week-"+String(dayOfWeek);

		if (Calendar.MonthGrid.data.SelectedDate.equals(date)) {
			css += " selected";
		}

		if (today.equals(date)) {
			css += " today";
		}

		if (Calendar.MonthGrid.data.StartRange.isAfter(date)) {
			css += " prev-month";
		} else if (Calendar.MonthGrid.data.EndRange.isBefore(date)) {
			css += " next-month";
		}

		return css;
	};

	this.initResize = function() {
		var elem = $(this);

		function adjust() {
			elem.height( $(document.body).height() - $("h1").height() );
			var rows = elem.find("tr");
			if (!rows.length) {
				return;
			}
			var h = elem.height() / rows.length;
			rows.each(function() {
				$(this).find("td").height(Math.floor(h));
			});
		}

		// adjust on window resize
		$(window).resize(adjust);
		// initial adjustment
		adjust();
		// re-adjust shortly after rendering complete
		window.setTimeout(adjust, 0);
	};

</script>

<div class="month-view">

<h1>
<a class="button" href="<%= this.data.SelectedDate.clone().add({months:-1}).toString("/yyyy/M") %>">&laquo;</a>
<a class="button" href="#date" onclick="alert('TODO: date selector');return false;"><%= this.data.SelectedDate.toString("MMMM yyyy") %></a>
<a class="button" href="<%= this.data.SelectedDate.clone().add({months:1}).toString("/yyyy/M") %>">&raquo;</a>
</h1>

<table jbst:oninit="<%= this.initResize %>">
	<tr>
		<th>Sunday</th>
		<th>Monday</th>
		<th>Tuesday</th>
		<th>Wednesday</th>
		<th>Thursday</th>
		<th>Friday</th>
		<th>Saturday</th>
	</tr>

<jbst:control data="<%= this.buildMonth(this.data.SelectedDate, this.data.Items) %>">
	<tr>

		<jbst:control data="<%= this.data.days %>">

			<td class="<%= Calendar.MonthGrid.getCss(this.data.Date, this.index) %>"
				onclick="<%= Calendar.MonthGrid.changeDayClosure(this.data.Date) %>">

				<h3><%= this.data.Date.getDate().toString() %></h3>
				<ul jbst:visible="<%= !!this.data.Events.length %>">

				<jbst:control data="<%= this.data.Events %>">
					<li title="<%= "(" + this.data.Starting.toString("yyyy-MM-dd HH:mm:ss") + " to " + this.data.Ending.toString("yyyy-MM-dd HH:mm:ss") + ")" %>">
						<%= this.data.Label %>
					</li>
				</jbst:control>

				</ul>
			</td>

		</jbst:control>

	</tr>
</jbst:control>

</table>

</div>
