<%@ Control Name="Calendar.MonthGrid" Language="JavaScript" %>

<script type="text/javascript">
	var today = Date.today();

	this.buildMonth = function(/*Date*/ date, /*Events[]*/ events) {
		if (!(date instanceof Date)) {
			date = new Date();
		}

		var	ordinal = date.getMonth(),
			current = date.clone().moveToFirstDayOfMonth().clearTime(),
			last = date.clone().moveToLastDayOfMonth().moveToDayOfWeek(0).clearTime(),
			month = [],
			week;

		if (current.getDay()) {
			current.moveToDayOfWeek(0, -1);
		}

		for (; current.isBefore(last); current.addDays(1)) {
			if (!current.getDay()) {
				// Each sunday start a new week
				week = {
					days: []
				};
				month.push(week);
			}

			var day = {
				Date: current.clone(),
				Events: Calendar.DateUtil.filterDay(events, current),
				IsPrev: current.getMonth() < ordinal,
				IsNext: current.getMonth() > ordinal,
				IsSelected : Calendar.MonthGrid.SelectedDate.equals(current)
			};
			week.days.push(day);
		}

		return month;
	};

	this.changeDayClosure = function(/*Date*/ date) {
		// only allow clicking on current month days for now
		if (Calendar.MonthGrid.SelectedDate.getMonth() != date.getMonth()) {
			return function() {
				window.location.href = date.toString("/yyyy/M#d");
				return false;
			};
		}

		// this function will become the onclick event
		return function() {
			var oldGrid = $(".month-view");
			if (!oldGrid.length) {
				return;
			}

			Calendar.Model.SelectedDate = date;
			window.location.hash = "#"+date.getDate();
			$(".selected").removeClass("selected");
			$(this).addClass("selected");

			//return false;
		};
	};

	this.createEventClosure = function(/*Date*/ date) {
		date = date.clone();

		// this function will become the onclick event
		return function(e) {
			var evt = {
				Starting: date.clone().set({
						hour: 12,
						minute: 0
					}),
				Ending: date.clone().set({
						hour: 13,
						minute: 0
					}),
			};

			Calendar.EditEvent.show(
				evt,
				Calendar.MonthGrid.changeDayClosure(date));

			JsonFx.UI.cancelEvent(e);
			return false;
		};
	};

	this.getCss = function(/*Day*/ data, /*int*/ dayOfWeek) {
		var date = data.Date.clone().clearTime();
		var css = "day-of-week-"+String(dayOfWeek);

		if (data.IsSelected) {
			css += " selected";
		}

		if (today.equals(date)) {
			css += " today";
		}

		if (data.IsPrev) {
			css += " prev-month";
		} else if (data.IsNext) {
			css += " next-month";
		}

		return css;
	};

	this.initResize = function() {
		var h1 = $(this).find("h1");
		var table = $(this).find("table");
		var head = table.find("th").slice(0, 1);
		var rows = table.find("tr").length-1;
		var cells = table.find("td");

		function adjust() {
			var h = $(document.body).height() - h1.height();
			table.height(h);
			if (rows > 0) {
				var w = Math.floor(table.width()/7);
				h = Math.floor((h-head.height())/rows);
				cells.find("div").andSelf().height(h).width(w);
			}
		}

		// adjust on window resize
		$(window).resize(adjust);
		// initial adjustment
		adjust();
		// re-adjust shortly after rendering complete
		window.setTimeout(adjust, 0);
	};

</script>

<%
	// this block executes each time is bound
	if (window.location.hash.length > 1 &&
		isFinite(window.location.hash.substr(1))) {
		this.SelectedDate = this.data.SelectedDate.set(
			{
				day: Number(window.location.hash.substr(1))
			});
	} else {
		this.SelectedDate = this.data.SelectedDate;
	}
%>

<div class="month-view" jbst:oninit="<%= this.initResize %>">

<h1>
<a class="button" href="<%= this.SelectedDate.clone().add({months:-1}).toString("/yyyy/M") %>">&laquo;</a>
<a class="button" href="<%= this.SelectedDate.toString("/yyyy") %>"><%= this.data.SelectedDate.toString("MMMM yyyy") %></a>
<a class="button" href="<%= this.SelectedDate.clone().add({months:1}).toString("/yyyy/M") %>">&raquo;</a>
</h1>

<table>
	<tr>
		<th>Sunday</th>
		<th>Monday</th>
		<th>Tuesday</th>
		<th>Wednesday</th>
		<th>Thursday</th>
		<th>Friday</th>
		<th>Saturday</th>
	</tr>

<jbst:control data="<%= this.buildMonth(this.SelectedDate, this.data.Items) %>">
	<tr>

		<jbst:control data="<%= this.data.days %>">

			<td class="<%= Calendar.MonthGrid.getCss(this.data, this.index) %>"
				onclick="<%= Calendar.MonthGrid.changeDayClosure(this.data.Date) %>">

				<div class="day">
					<h3><%= this.data.Date.getDate().toString() %></h3>

				<span class="action">
					<a href="#add-event"
						class="event"
						onclick="<%= Calendar.MonthGrid.createEventClosure(this.data.Date) %>">Add Event</a>

					<a href="<%= this.data.Date.toString("/yyyy/M/d") %>"
						class="event">Hourly</a>
				</span>

				<jbst:control data="<%= this.data.Events %>">
					<a class="event"
						title="<%= "(" + this.data.Starting.toString("yyyy-MM-dd HH:mm:ss") + " to " + this.data.Ending.toString("yyyy-MM-dd HH:mm:ss") + ")" %>"
						onclick="alert('TODO')">
						<%= this.data.Label %>
					</a>
				</jbst:control>

				</div>
			</td>

		</jbst:control>

	</tr>
</jbst:control>

</table>

</div>
