<%@ Control Name="Example.historySlide" Language="JavaScript" %>

<jbst:Control jbst:Name="Example.jsonfxInfo" />

<jbst:Control jbst:Name="Example.slideFrame">

	<h2>Don't break the browser back button</h2>

	<p>JsonFx provides an easy to use mechanism for cross-browser support of the back button in Ajax applications.</p>

	<code class="Syntax Example" style="margin-right:180px">
		<div class="Comment">&lt;!-- Add the server control to your Page or MasterPage and set the Callback property. Example.historyCallback is the function that will get called when the user navigates --&gt;</div>
		<span class="Op">&lt;</span><span class="Key">JsonFx</span><span class="Op">:</span><span class="Key">HistoryManager</span> <span class="Key">runat</span><span class="Op">=</span><span class="Lit">"server"</span> <span class="Key">Callback</span><span class="Op">=</span><span class="Lit">"Example.historyCallback"</span> <span class="Op">/&gt;</span>
	</code>

	<p>Then implement the callback method to change out the UI when the user navigates with the browser buttons.</p>
	<code class="Syntax Example" style="margin-right:180px;">

		<div class="Comment">// Ajax history callback implementation</div>
		Example.historyCallback = <span class="Key">function</span>(<span class="Comment">/*object*/</span> info) {
		<div class="Indent">
			if (!info) {
			<div class="Indent">
				<span class="Key">return</span>;
			</div>
			}<br /><br />

			Example.doWork( info.myValue );
		</div>
		};	
	</code>

	<h2>Saving state in the browser history</h2>

	<p>Now each time you need to change the state of your application, just call into JsonFx.History to store a JSON-serializable object which will in turn trigger your callback:</p>
	<code class="Syntax Example">
		<span class="Key">var</span> state = { <span class="Lit">"myColor"</span>: "green", <span class="Lit">"myNum"</span>: 1337 };<br /><br />

		<div class="Comment">
			// this triggers JsonFx.History.onchange and<br />
			// then the history callback performs work.<br />
			// this way when a history event is triggered<br />
			// it uses the same code as user actions.<br />
		</div>
		JsonFx.History.save( state );

	</code>
	
	<p>Calling into the <code>JsonFx.History.save(&hellip;)</code> method to change state means that you only have one code path for state changes whether it is caused by an application event or the browser forward/back buttons.</p>

	<h2>Setting the initial state</h2>

	<p>If your application can start with multiple states, then it may be helpful to initialize the HistoryManager with a specific state object.</p>
	<code class="Syntax Example">
		<div class="Comment">
			// Again this accepts any JSON-serializable object.<br />
		</div>
		<span class="Key">this</span>.historyManager.StartState = <span class="Key">new</span> <span class="Type">MyStateObject</span>(3.14159, <span class="Lit">"yellow"</span>);
	</code>

</jbst:Control>